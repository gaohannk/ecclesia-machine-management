diff --git a/google3/third_party/jsoncpp/features.h b/google3/third_party/jsoncpp/features.h
index a82a0a5dd..c70d4a26c 100644
--- a/google3/third_party/jsoncpp/features.h
+++ b/google3/third_party/jsoncpp/features.h
@@ -53,6 +53,14 @@ public:
 
   // Local google3 patch for multithreaded depth limit.
   int stackLimit_;
+
+  // Local google3 patch which allows duplicate keys to be rejected. This
+  // feature was backported from the newer CharReader interface, and was
+  // rejected as an upstream patch by jsoncpp maintainers. Depending on this
+  // would make code non-portable outside of google3. New uses of jsoncpp are
+  // urged to use the non-deprecated CharReader interface.
+  // Default: false.
+  bool rejectDupKeys_;
 };
 
 } // namespace Json
diff --git a/google3/third_party/jsoncpp/json_reader.cc b/google3/third_party/jsoncpp/json_reader.cc
index db3b58536..e5abb177c 100644
--- a/google3/third_party/jsoncpp/json_reader.cc
+++ b/google3/third_party/jsoncpp/json_reader.cc
@@ -58,7 +58,7 @@ typedef std::auto_ptr<CharReader>   CharReaderPtr;
 Features::Features()
     : allowComments_(true), strictRoot_(false),
       allowDroppedNullPlaceholders_(false), allowNumericKeys_(false),
-      stackLimit_(1000) {}
+      stackLimit_(1000), rejectDupKeys_(false) {}
 
 Features Features::all() { return Features(); }
 
@@ -490,6 +490,11 @@ bool Reader::readObject(Token& tokenStart) {
       return addErrorAndRecover(
           "Missing ':' after object member name", colon, tokenObjectEnd);
     }
+    if (features_.rejectDupKeys_ && currentValue().isMember(name)) {
+      JSONCPP_STRING msg = "Duplicate key: '" + name + "'";
+      return addErrorAndRecover(
+          msg, tokenName, tokenObjectEnd);
+    }
     Value& value = currentValue()[name];
     nodes_.push(&value);
     bool ok = readValue();
