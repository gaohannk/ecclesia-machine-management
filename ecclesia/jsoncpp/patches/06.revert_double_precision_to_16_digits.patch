diff --git a/google3/third_party/jsoncpp/json_writer.cc b/google3/third_party/jsoncpp/json_writer.cc
index 39d07e7..77d9f48 100644
--- a/google3/third_party/jsoncpp/json_writer.cc
+++ b/google3/third_party/jsoncpp/json_writer.cc
@@ -167,7 +167,7 @@ JSONCPP_STRING valueToString(double value, bool useSpecialFloats, unsigned int p
 }
 }
 
-JSONCPP_STRING valueToString(double value) { return valueToString(value, false, 17); }
+JSONCPP_STRING valueToString(double value) { return valueToString(value, false, 16); }
 
 JSONCPP_STRING valueToString(bool value) { return value ? "true" : "false"; }
 
@@ -1151,7 +1151,7 @@ StreamWriter* StreamWriterBuilder::newStreamWriter() const
   if (dnp) {
     nullSymbol = "";
   }
-  if (pre > 17) pre = 17;
+  if (pre > 16) pre = 16;
   JSONCPP_STRING endingLineFeedSymbol = "";
   return new BuiltStyledStreamWriter(
       indentation, cs,
@@ -1197,7 +1197,7 @@ void StreamWriterBuilder::setDefaults(Json::Value* settings)
   (*settings)["enableYAMLCompatibility"] = false;
   (*settings)["dropNullPlaceholders"] = false;
   (*settings)["useSpecialFloats"] = false;
-  (*settings)["precision"] = 17;
+  (*settings)["precision"] = 16;
   //! [StreamWriterBuilderDefaults]
 }
 
diff --git a/google3/third_party/jsoncpp/unit_tests/jsoncpp_test.cc b/google3/third_party/jsoncpp/unit_tests/jsoncpp_test.cc
index 6360e56..c5125f7 100644
--- a/google3/third_party/jsoncpp/unit_tests/jsoncpp_test.cc
+++ b/google3/third_party/jsoncpp/unit_tests/jsoncpp_test.cc
@@ -962,7 +962,7 @@ JSONTEST_FIXTURE(ValueTest, integers) {
   JSONTEST_ASSERT_EQUAL(float(uint64ToDouble(Json::UInt64(1) << 63)),
                         val.asFloat());
   JSONTEST_ASSERT_EQUAL(true, val.asBool());
-  JSONTEST_ASSERT_STRING_EQUAL("9.2233720368547758e+18",
+  JSONTEST_ASSERT_STRING_EQUAL("9.223372036854776e+18",
                                normalizeFloatingPointStr(JsonTest::ToJsonString(val.asString())));
 
   // int64 min
@@ -1010,7 +1010,7 @@ JSONTEST_FIXTURE(ValueTest, integers) {
   JSONTEST_ASSERT_EQUAL(-9223372036854775808.0, val.asDouble());
   JSONTEST_ASSERT_EQUAL(-9223372036854775808.0, val.asFloat());
   JSONTEST_ASSERT_EQUAL(true, val.asBool());
-  JSONTEST_ASSERT_STRING_EQUAL("-9.2233720368547758e+18",
+  JSONTEST_ASSERT_STRING_EQUAL("-9.223372036854776e+18",
                                normalizeFloatingPointStr(JsonTest::ToJsonString(val.asString())));
 
   // 10^19
@@ -1101,7 +1101,7 @@ JSONTEST_FIXTURE(ValueTest, integers) {
   JSONTEST_ASSERT_EQUAL(18446744073709551616.0, val.asDouble());
   JSONTEST_ASSERT_EQUAL(18446744073709551616.0, val.asFloat());
   JSONTEST_ASSERT_EQUAL(true, val.asBool());
-  JSONTEST_ASSERT_STRING_EQUAL("1.8446744073709552e+19",
+  JSONTEST_ASSERT_STRING_EQUAL("1.844674407370955e+19",
                                normalizeFloatingPointStr(JsonTest::ToJsonString(val.asString())));
 #endif
 }
@@ -1253,7 +1253,7 @@ JSONTEST_FIXTURE(ValueTest, nonIntegers) {
                         normalizeFloatingPointStr(JsonTest::ToJsonString(val.asString())));
 
   val = Json::Value(1.2345678901234);
-  JSONTEST_ASSERT_STRING_EQUAL("1.2345678901234001",
+  JSONTEST_ASSERT_STRING_EQUAL("1.2345678901234",
                                normalizeFloatingPointStr(JsonTest::ToJsonString(val.asString())));
 
   // A 16-digit floating point number.
@@ -1701,13 +1701,13 @@ JSONTEST_FIXTURE(ValueTest, precision) {
 
     b.settings_["precision"] = 17;
     v = 1234857476305.256345694873740545068;
-    expected = "1234857476305.2563";
+    expected = "1234857476305.256";
     result = Json::writeString(b, v);
     JSONTEST_ASSERT_STRING_EQUAL(expected, result);
 
     b.settings_["precision"] = 24;
     v = 0.256345694873740545068;
-    expected = "0.25634569487374054";
+    expected = "0.2563456948737405";
     result = Json::writeString(b, v);
     JSONTEST_ASSERT_STRING_EQUAL(expected, result);
 }
