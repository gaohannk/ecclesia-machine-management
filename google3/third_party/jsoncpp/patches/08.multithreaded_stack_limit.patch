diff --git a/google3/third_party/jsoncpp/features.h b/google3/third_party/jsoncpp/features.h
index db69bdf..a82a0a5 100644
--- a/google3/third_party/jsoncpp/features.h
+++ b/google3/third_party/jsoncpp/features.h
@@ -50,6 +50,9 @@ public:
 
   /// \c true if numeric object key are allowed. Default: \c false.
   bool allowNumericKeys_;
+
+  // Local google3 patch for multithreaded depth limit.
+  int stackLimit_;
 };
 
 } // namespace Json
diff --git a/google3/third_party/jsoncpp/json_reader.cc b/google3/third_party/jsoncpp/json_reader.cc
index 05304e6..db3b585 100644
--- a/google3/third_party/jsoncpp/json_reader.cc
+++ b/google3/third_party/jsoncpp/json_reader.cc
@@ -44,9 +44,6 @@
 #pragma warning(disable : 4996)
 #endif
 
-static int const stackLimit_g = 1000;
-static int       stackDepth_g = 0;  // see readValue()
-
 namespace Json {
 
 #if __cplusplus >= 201103L || (defined(_CPPLIB_VER) && _CPPLIB_VER >= 520)
@@ -60,7 +57,8 @@ typedef std::auto_ptr<CharReader>   CharReaderPtr;
 
 Features::Features()
     : allowComments_(true), strictRoot_(false),
-      allowDroppedNullPlaceholders_(false), allowNumericKeys_(false) {}
+      allowDroppedNullPlaceholders_(false), allowNumericKeys_(false),
+      stackLimit_(1000) {}
 
 Features Features::all() { return Features(); }
 
@@ -70,6 +68,7 @@ Features Features::strictMode() {
   features.strictRoot_ = true;
   features.allowDroppedNullPlaceholders_ = false;
   features.allowNumericKeys_ = false;
+  features.stackLimit_ = 1000;
   return features;
 }
 
@@ -89,7 +88,7 @@ static bool containsNewLine(Reader::Location begin, Reader::Location end) {
 Reader::Reader()
     : errors_(), document_(), begin_(), end_(), current_(), lastValueEnd_(),
       lastValue_(), commentsBefore_(), features_(Features::all()),
-      collectComments_() {}
+      collectComments_(), stackDepth_(0) {}
 
 Reader::Reader(const Features& features)
     : errors_(), document_(), begin_(), end_(), current_(), lastValueEnd_(),
@@ -138,7 +137,7 @@ bool Reader::parse(const char* beginDoc,
     nodes_.pop();
   nodes_.push(&root);
 
-  stackDepth_g = 0;  // Yes, this is bad coding, but options are limited.
+  stackDepth_ = 0;
   bool successful = readValue();
   Token token;
   skipCommentTokens(token);
@@ -164,15 +163,11 @@ bool Reader::readValue() {
   Token token;
   skipCommentTokens(token);
 
-  // This is a non-reentrant way to support a stackLimit. Terrible!
-  // But this deprecated class has a security problem: Bad input can
-  // cause a seg-fault. This seems like a fair, binary-compatible way
-  // to prevent the problem.
-  if (stackDepth_g >= stackLimit_g) {
+  if (stackDepth_ >= features_.stackLimit_) {
     addError("Exceeded stackLimit in readValue().", token);
     return false;
   }
-  ++stackDepth_g;
+  ++stackDepth_;
 
   bool successful = true;
 
@@ -244,7 +239,7 @@ bool Reader::readValue() {
     lastValue_ = &currentValue();
   }
 
-  --stackDepth_g;
+  --stackDepth_;
   return successful;
 }
 
diff --git a/google3/third_party/jsoncpp/reader.h b/google3/third_party/jsoncpp/reader.h
index 60d7a3e..231f0a5 100644
--- a/google3/third_party/jsoncpp/reader.h
+++ b/google3/third_party/jsoncpp/reader.h
@@ -240,6 +240,7 @@ private:
   JSONCPP_STRING commentsBefore_;
   Features features_;
   bool collectComments_;
+  int stackDepth_;
 };  // Reader
 
 /** Interface for reading JSON from a char array.
